
flowchart TD
    %% Entry Points (User Actions & Map Events)
    UserPan["👤 User pans/zooms map"]
    MapLoad["🗺️ Map onLoad event"]
    UserClickEvent["👤 User clicks event in EventList"]

    %% ========== MAP INTERACTION FLOWS ==========

    %% Main Flow Functions
    UserPan -->|triggers| handleViewportChange
    MapLoad -->|triggers| handleMapLoad

    %% handleViewportChange flow
    handleViewportChange["<b>handleViewportChange</b><br/>(Map onMove callback)<br/>MapContainer.tsx:128"]
    handleViewportChange -->|1. Get new dimensions| updateMapWidthHeight
    handleViewportChange -->|2. Update viewport state| onViewportChange
    handleViewportChange -->|3. Debounced bounds update| debouncedUpdateBounds

    %% updateMapWidthHeight details
    updateMapWidthHeight["<b>updateMapWidthHeight</b><br/>(Get map dimensions)<br/>MapContainer.tsx:67"]
    updateMapWidthHeight -->|if dimensions changed| onWidthHeightChange
    updateMapWidthHeight -.->|reads| mapRef["mapRef.current<br/>(MapLibre instance)"]
    onWidthHeightChange["<b>onWidthHeightChange</b><br/>(Notify parent - page.tsx)<br/>Prop callback"]

    %% debouncedUpdateBounds flow
    debouncedUpdateBounds["<b>debouncedUpdateBounds</b><br/>(Debounced: 500ms)<br/>MapContainer.tsx:121"]
    debouncedUpdateBounds -->|after delay| getMapBounds
    getMapBounds["<b>getMapBounds</b><br/>(Read current bounds)<br/>MapContainer.tsx:97"]
    getMapBounds -.->|reads| mapRef
    getMapBounds -->|returns MapBounds| roundMapBounds["roundMapBounds()<br/>(Utility function)"]
    roundMapBounds -->|rounded bounds| onBoundsChange

    %% onViewportChange flow
    onViewportChange["<b>onViewportChange</b><br/>(Notify parent - page.tsx)<br/>Prop callback"]
    onViewportChange -->|calls| setViewport["<b>setViewport</b><br/>(useMap hook)<br/>useMap.ts:189"]
    setViewport -->|updates| mapState["mapState.viewport<br/>(React state)"]

    %% onBoundsChange flow
    onBoundsChange["<b>onBoundsChange</b><br/>(Notify parent - page.tsx)<br/>Prop callback<br/>MapContainer.tsx:27"]
    onBoundsChange -->|triggers| handleBoundsChangeForFilters["handleBoundsChangeForFilters<br/>(useAppController.ts:198)"]
    handleBoundsChangeForFilters -->|updates| currentBoundsState["setCurrentBounds()<br/>(React state)"]
    currentBoundsState -->|triggers filter| filterByBounds["Filter events by bounds<br/>(useEventsManager)"]
    filterByBounds -->|updates| visibleEvents["visibleEvents<br/>(Filtered event list)"]
    visibleEvents -.->|re-render| MapContainerRerender["MapContainer re-renders<br/>with new markers"]

    %% handleMapLoad flow
    handleMapLoad["<b>handleMapLoad</b><br/>(Map initialization)<br/>MapContainer.tsx:146"]
    handleMapLoad -->|setTimeout 10ms| updateMapWidthHeight2["updateMapWidthHeight()"]
    handleMapLoad -->|setTimeout 10ms| getMapBounds2["getMapBounds()"]
    updateMapWidthHeight2 -->|if changed| onWidthHeightChange2["onWidthHeightChange()"]
    getMapBounds2 -->|initial bounds| onBoundsChange2["onBoundsChange(bounds, false)"]
    onBoundsChange2 -.->|false = not user interaction| handleBoundsChangeForFilters

    %% ========== EVENT SELECTION FLOW ==========

    UserClickEvent -->|onClick| onEventSelectProp["<b>onEventSelect(eventId)</b><br/>(EventList.tsx:257)<br/>Prop callback"]
    onEventSelectProp -->|calls| handleEventSelect["<b>handleEventSelect</b><br/>(useAppController.ts:366)"]

    handleEventSelect -->|1. Update URL| setSelectedEventIdUrl["setSelectedEventIdUrl(eventId)<br/>(URL query state)"]
    handleEventSelect -->|2. Find event| findEvent["Find event in cmfEvents.allEvents"]

    findEvent -->|if resolved location| resolvedFlow["Resolved Location Flow"]
    findEvent -->|if unresolved| unresolvedFlow["Unresolved Location Flow"]

    %% Resolved location flow
    resolvedFlow -->|3a. Generate marker ID| genMarkerId["genMarkerId(event)<br/>(lat,lng hash)"]
    genMarkerId -->|4a. Select marker| setSelectedMarkerIdCall["setSelectedMarkerId(markerId)<br/>(useMap.ts:303)"]
    setSelectedMarkerIdCall -->|updates| markerState["mapState.selectedMarkerId<br/>(React state)"]
    markerState -.->|highlights| MarkerHighlight["Marker highlights on map"]

    resolvedFlow -->|5a. Calculate offset| calculateOffset["Calculate lat offset<br/>based on zoom"]
    calculateOffset -->|6a. Pan & zoom to event| setViewportCall["setViewport()<br/>(zoom: 14, pan to event)"]
    setViewportCall -->|updates viewport| mapState
    mapState -.->|triggers| MapContainerRerender

    %% Unresolved location flow
    unresolvedFlow -->|3b. Select unresolved marker| setUnresolvedMarker["setSelectedMarkerId('unresolved')"]
    unresolvedFlow -->|4b. Find unresolved marker| findUnresolvedMarker["Find 'unresolved' marker<br/>in markers array"]
    findUnresolvedMarker -->|5b. Pan to unresolved| setViewportUnresolved["setViewport()<br/>(zoom: 14, pan to unresolved)"]
    setViewportUnresolved -->|updates viewport| mapState

    %% Map updates trigger popup
    MarkerHighlight -.->|when marker selected| showPopup["MapPopup displays<br/>(MapContainer.tsx:326)"]
    showPopup -->|shows event details| PopupContent["Event details, links,<br/>event list in popup"]

    %% Styling
    classDef entryPoint fill:#e1f5ff,stroke:#0288d1,stroke-width:3px
    classDef mainFunc fill:#fff3e0,stroke:#f57c00,stroke-width:2px
    classDef callback fill:#f3e5f5,stroke:#7b1fa2,stroke-width:2px
    classDef state fill:#e8f5e9,stroke:#388e3c,stroke-width:2px
    classDef utility fill:#fce4ec,stroke:#c2185b,stroke-width:1px
    classDef eventFlow fill:#fff9c4,stroke:#f57f17,stroke-width:2px

    class UserPan,MapLoad,UserClickEvent entryPoint
    class handleViewportChange,handleMapLoad,updateMapWidthHeight,debouncedUpdateBounds,getMapBounds mainFunc
    class onViewportChange,onBoundsChange,onWidthHeightChange,setViewport,onEventSelectProp callback
    class mapState,visibleEvents,mapRef,markerState,currentBoundsState state
    class roundMapBounds,calculateOffset,genMarkerId utility
    class handleEventSelect,resolvedFlow,unresolvedFlow,setSelectedEventIdUrl,findEvent eventFlow

    %% Add legend
    subgraph Legend
        EP["🟦 Entry Point<br/>(User action)"]
        MF["🟧 Main Function<br/>(MapContainer)"]
        CB["🟪 Callback<br/>(Props to parent)"]
        ST["🟩 State<br/>(React/Map state)"]
        EF["🟨 Event Selection<br/>(Event click flow)"]
    end
