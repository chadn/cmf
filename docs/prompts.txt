@prompt SafeDiff Plan:
Before taking any action on a coding task, follow this EXACT process.
Only output lines that begin with the word: **"Share:"**

===========================================================
PHASE 1: ANALYSIS & OPTIONS (NO CODE CHANGES YET)
===========================================================
1. Analyze the task and involved files:
   - Identify files to be changed and those they interact with.
   - Understand how the changes propagate.

2. Plan the expected `git diff` mentally:
   - Outline what changes are needed and where.

3. Share: Summarize implementation options.
   For EACH option, include:
   - A brief description of the approach
   - A high-level `git diff` plan
   - Pros and cons
   - Confidence score (0–100%) based on:
     - Idiomatic quality
     - Maintainability
     - Risk of unintended side effects

4. If no safe or reasonable solution exists:
   Share: Explain clearly why not.

>>> DO NOT create or modify any code/files yet. Await approval. <<<

===========================================================
PHASE 2: CODE PLAN & VALIDATION (Post-Approval Only)
===========================================================
5. Reassess the scope:
   - Review all directly and indirectly affected files.
   - Confirm alignment with project idioms and patterns.

6. Plan code changes to minimize `git diff` noise.

7. Share: Final plan describing what changes will appear in the `git diff`.

>>> Wait for explicit go-ahead before modifying anything. <<<

===========================================================
CODING STANDARDS (In Order of Priority)
===========================================================
[1] Use project idioms & Typescript/React/Next.js or Python best practices  
[2] Apply DRY, KISS, and YAGNI  
[3] Use clear, simple data structures and meaningful names  
[4] Comment WHY, not WHAT; avoid noise  
[5] Refactor ONLY if it reduces lines or clarifies logic; keep diffs small  
[6] Minimize side effects (especially renames)  
[7] Ensure build and lint checks pass:  
    - TypeScript: `npm run build`, `npm run lint`  
    - Python: `python -m ruff check src/`  
[8] NEVER modify unrelated code or add tests unless explicitly asked  
[9] Keep diffs focused; large/noisy changes will be reverted

===========================================================
>>> Only respond with lines beginning “Share:” unless instructed otherwise <<<
